group 'com.micro.arch'
version '1.0'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
    }
}

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:1.0.1.RELEASE"
        }
    }

    dependencies {

        compile("org.codehaus.groovy:groovy:2.4.3")
        compile("org.springframework.boot:spring-boot-starter-web") {
            exclude module: "spring-boot-starter-tomcat"
        }
        compile("org.springframework.boot:spring-boot-starter-jetty")
        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile 'org.springframework.cloud:spring-cloud-netflix:1.0.2.RELEASE'
        compile 'org.springframework.cloud:spring-cloud-config-client'

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

//    task buildDocker << { task ->
//        println "Docker image for project $task.project.name"
//        def changeDir = "cd $task.project.rootDir"
//        def dockerBuild = "/usr/local/bin/docker build -t tiagodeoliveira/micro-arch-$task.project.name ."
//        def dockerPush = "/usr/local/bin/docker push tiagodeoliveira/micro-arch-$task.project.name"
//
//        def executor = { command ->
//            def proc = command.execute()
//            proc.in.eachLine {line -> println line}
//            proc.err.eachLine {line -> println 'ERROR: ' + line}
//            proc.waitFor()
//        }
//
//        executor(changeDir)
//        executor(dockerBuild)
//        executor(dockerPush)
//    }

}